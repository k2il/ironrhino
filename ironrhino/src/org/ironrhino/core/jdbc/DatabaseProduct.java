package org.ironrhino.core.jdbc;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang3.StringUtils;

public enum DatabaseProduct {

	MYSQL {
		@Override
		public int getDefaultPort() {
			return 3306;
		}

		@Override
		public List<String> getKeywords() {
			return Arrays
					.asList("ACCESSIBLE,ADD,ALL,ALTER,ANALYZE,AND,AS,ASC,ASENSITIVE,BEFORE,BETWEEN,BIGINT,BINARY,BLOB,BOTH,BY,CALL,CASCADE,CASE,CHANGE,CHAR,CHARACTER,CHECK,COLLATE,COLUMN,CONDITION,CONSTRAINT,CONTINUE,CONVERT,CREATE,CROSS,CURRENT_DATE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_USER,CURSOR,DATABASE,DATABASES,DAY_HOUR,DAY_MICROSECOND,DAY_MINUTE,DAY_SECOND,DEC,DECIMAL,DECLARE,DEFAULT,DELAYED,DELETE,DESC,DESCRIBE,DETERMINISTIC,DISTINCT,DISTINCTROW,DIV,DOUBLE,DROP,DUAL,EACH,ELSE,ELSEIF,ENCLOSED,ESCAPED,EXISTS,EXIT,EXPLAIN,FALSE,FETCH,FLOAT,FLOAT4,FLOAT8,FOR,FORCE,FOREIGN,FROM,FULLTEXT,GRANT,GROUP,HAVING,HIGH_PRIORITY,HOUR_MICROSECOND,HOUR_MINUTE,HOUR_SECOND,IF,IGNORE,IN,INDEX,INFILE,INNER,INOUT,INSENSITIVE,INSERT,INT,INT1,INT2,INT3,INT4,INT8,INTEGER,INTERVAL,INTO,IS,ITERATE,JOIN,KEY,KEYS,KILL,LEADING,LEAVE,LEFT,LIKE,LIMIT,LINEAR,LINES,LOAD,LOCALTIME,LOCALTIMESTAMP,LOCK,LONG,LONGBLOB,LONGTEXT,LOOP,LOW_PRIORITY,MASTER_SSL_VERIFY_SERVER_CERT,MATCH,MAXVALUE,MEDIUMBLOB,MEDIUMINT,MEDIUMTEXT,MIDDLEINT,MINUTE_MICROSECOND,MINUTE_SECOND,MOD,MODIFIES,NATURAL,NOT,NO_WRITE_TO_BINLOG,NULL,NUMERIC,ON,OPTIMIZE,OPTION,OPTIONALLY,OR,ORDER,OUT,OUTER,OUTFILE,PRECISION,PRIMARY,PROCEDURE,PURGE,RANGE,READ,READS,READ_WRITE,REAL,REFERENCES,REGEXP,RELEASE,RENAME,REPEAT,REPLACE,REQUIRE,RESIGNAL,RESTRICT,RETURN,REVOKE,RIGHT,RLIKE,SCHEMA,SCHEMAS,SECOND_MICROSECOND,SELECT,SENSITIVE,SEPARATOR,SET,SHOW,SIGNAL,SMALLINT,SPATIAL,SPECIFIC,SQL,SQLEXCEPTION,SQLSTATE,SQLWARNING,SQL_BIG_RESULT,SQL_CALC_FOUND_ROWS,SQL_SMALL_RESULT,SSL,STARTING,STRAIGHT_JOIN,TABLE,TERMINATED,THEN,TINYBLOB,TINYINT,TINYTEXT,TO,TRAILING,TRIGGER,TRUE,UNDO,UNION,UNIQUE,UNLOCK,UNSIGNED,UPDATE,USAGE,USE,USING,UTC_DATE,UTC_TIME,UTC_TIMESTAMP,VALUES,VARBINARY,VARCHAR,VARCHARACTER,VARYING,WHEN,WHERE,WHILE,WITH,WRITE,XOR,YEAR_MONTH,ZEROFILL"
							.split(","));
		}
	},
	POSTGRESQL {
		@Override
		public int getDefaultPort() {
			return 5432;
		}

		@Override
		public List<String> getKeywords() {
			return Arrays
					.asList("A,ABORT,ABS,ABSENT,ABSOLUTE,ACCESS,ACCORDING,ACTION,ADA,ADD,ADMIN,AFTER,AGGREGATE,ALL,ALLOCATE,ALSO,ALTER,ALWAYS,ANALYSE,ANALYZE,AND,ANY,ARE,ARRAY,ARRAY_AGG,ARRAY_MAX_CARDINALITY,AS,ASC,ASENSITIVE,ASSERTION,ASSIGNMENT,ASYMMETRIC,AT,ATOMIC,ATTRIBUTE,ATTRIBUTES,AUTHORIZATION,AVG,BACKWARD,BASE64,BEFORE,BEGIN,BEGIN_FRAME,BEGIN_PARTITION,BERNOULLI,BETWEEN,BIGINT,BINARY,BIT,BIT_LENGTH,BLOB,BLOCKED,BOM,BOOLEAN,BOTH,BREADTH,BY,C,CACHE,CALL,CALLED,CARDINALITY,CASCADE,CASCADED,CASE,CAST,CATALOG,CATALOG_NAME,CEIL,CEILING,CHAIN,CHAR,CHARACTER,CHARACTERISTICS,CHARACTERS,CHARACTER_LENGTH,CHARACTER_SET_CATALOG,CHARACTER_SET_NAME,CHARACTER_SET_SCHEMA,CHAR_LENGTH,CHECK,CHECKPOINT,CLASS,CLASS_ORIGIN,CLOB,CLOSE,CLUSTER,COALESCE,COBOL,COLLATE,COLLATION,COLLATION_CATALOG,COLLATION_NAME,COLLATION_SCHEMA,COLLECT,COLUMN,COLUMNS,COLUMN_NAME,COMMAND_FUNCTION,COMMAND_FUNCTION_CODE,COMMENT,COMMENTS,COMMIT,COMMITTED,CONCURRENTLY,CONDITION,CONDITION_NUMBER,CONFIGURATION,CONNECT,CONNECTION,CONNECTION_NAME,CONSTRAINT,CONSTRAINTS,CONSTRAINT_CATALOG,CONSTRAINT_NAME,CONSTRAINT_SCHEMA,CONSTRUCTOR,CONTAINS,CONTENT,CONTINUE,CONTROL,CONVERSION,CONVERT,COPY,CORR,CORRESPONDING,COST,COUNT,COVAR_POP,COVAR_SAMP,CREATE,CROSS,CSV,CUBE,CUME_DIST,CURRENT,CURRENT_CATALOG,CURRENT_DATE,CURRENT_DEFAULT_TRANSFORM_GROUP,CURRENT_PATH,CURRENT_ROLE,CURRENT_ROW,CURRENT_SCHEMA,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_TRANSFORM_GROUP_FOR_TYPE,CURRENT_USER,CURSOR,CURSOR_NAME,CYCLE,DATA,DATABASE,DATALINK,DATE,DATETIME_INTERVAL_CODE,DATETIME_INTERVAL_PRECISION,DAY,DB,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DEFAULTS,DEFERRABLE,DEFERRED,DEFINED,DEFINER,DEGREE,DELETE,DELIMITER,DELIMITERS,DENSE_RANK,DEPTH,DEREF,DERIVED,DESC,DESCRIBE,DESCRIPTOR,DETERMINISTIC,DIAGNOSTICS,DICTIONARY,DISABLE,DISCARD,DISCONNECT,DISPATCH,DISTINCT,DLNEWCOPY,DLPREVIOUSCOPY,DLURLCOMPLETE,DLURLCOMPLETEONLY,DLURLCOMPLETEWRITE,DLURLPATH,DLURLPATHONLY,DLURLPATHWRITE,DLURLSCHEME,DLURLSERVER,DLVALUE,DO,DOCUMENT,DOMAIN,DOUBLE,DROP,DYNAMIC,DYNAMIC_FUNCTION,DYNAMIC_FUNCTION_CODE,EACH,ELEMENT,ELSE,EMPTY,ENABLE,ENCODING,ENCRYPTED,END,END-EXEC,END_FRAME,END_PARTITION,ENFORCED,ENUM,EQUALS,ESCAPE,EVERY,EXCEPT,EXCEPTION,EXCLUDE,EXCLUDING,EXCLUSIVE,EXEC,EXECUTE,EXISTS,EXP,EXPLAIN,EXPRESSION,EXTENSION,EXTERNAL,EXTRACT,FALSE,FAMILY,FETCH,FILE,FILTER,FINAL,FIRST,FIRST_VALUE,FLAG,FLOAT,FLOOR,FOLLOWING,FOR,FORCE,FOREIGN,FORTRAN,FORWARD,FOUND,FRAME_ROW,FREE,FREEZE,FROM,FS,FULL,FUNCTION,FUNCTIONS,FUSION,G,GENERAL,GENERATED,GET,GLOBAL,GO,GOTO,GRANT,GRANTED,GREATEST,GROUP,GROUPING,GROUPS,HANDLER,HAVING,HEADER,HEX,HIERARCHY,HOLD,HOUR,ID,IDENTITY,IF,IGNORE,ILIKE,IMMEDIATE,IMMEDIATELY,IMMUTABLE,IMPLEMENTATION,IMPLICIT,IMPORT,IN,INCLUDING,INCREMENT,INDENT,INDEX,INDEXES,INDICATOR,INHERIT,INHERITS,INITIALLY,INLINE,INNER,INOUT,INPUT,INSENSITIVE,INSERT,INSTANCE,INSTANTIABLE,INSTEAD,INT,INTEGER,INTEGRITY,INTERSECT,INTERSECTION,INTERVAL,INTO,INVOKER,IS,ISNULL,ISOLATION,JOIN,K,KEY,KEY_MEMBER,KEY_TYPE,LABEL,LAG,LANGUAGE,LARGE,LAST,LAST_VALUE,LATERAL,LC_COLLATE,LC_CTYPE,LEAD,LEADING,LEAKPROOF,LEAST,LEFT,LENGTH,LEVEL,LIBRARY,LIKE,LIKE_REGEX,LIMIT,LINK,LISTEN,LN,LOAD,LOCAL,LOCALTIME,LOCALTIMESTAMP,LOCATION,LOCATOR,LOCK,LOWER,M,MAP,MAPPING,MATCH,MATCHED,MAX,MAXVALUE,MAX_CARDINALITY,MEMBER,MERGE,MESSAGE_LENGTH,MESSAGE_OCTET_LENGTH,MESSAGE_TEXT,METHOD,MIN,MINUTE,MINVALUE,MOD,MODE,MODIFIES,MODULE,MONTH,MORE,MOVE,MULTISET,MUMPS,NAME,NAMES,NAMESPACE,NATIONAL,NATURAL,NCHAR,NCLOB,NESTING,NEW,NEXT,NFC,NFD,NFKC,NFKD,NIL,NO,NONE,NORMALIZE,NORMALIZED,NOT,NOTHING,NOTIFY,NOTNULL,NOWAIT,NTH_VALUE,NTILE,NULL,NULLABLE,NULLIF,NULLS,NUMBER,NUMERIC,OBJECT,OCCURRENCES_REGEX,OCTETS,OCTET_LENGTH,OF,OFF,OFFSET,OIDS,OLD,ON,ONLY,OPEN,OPERATOR,OPTION,OPTIONS,OR,ORDER,ORDERING,ORDINALITY,OTHERS,OUT,OUTER,OUTPUT,OVER,OVERLAPS,OVERLAY,OVERRIDING,OWNED,OWNER,P,PAD,PARAMETER,PARAMETER_MODE,PARAMETER_NAME,PARAMETER_ORDINAL_POSITION,PARAMETER_SPECIFIC_CATALOG,PARAMETER_SPECIFIC_NAME,PARAMETER_SPECIFIC_SCHEMA,PARSER,PARTIAL,PARTITION,PASCAL,PASSING,PASSTHROUGH,PASSWORD,PATH,PERCENT,PERCENTILE_CONT,PERCENTILE_DISC,PERCENT_RANK,PERIOD,PERMISSION,PLACING,PLANS,PLI,PORTION,POSITION,POSITION_REGEX,POWER,PRECEDES,PRECEDING,PRECISION,PREPARE,PREPARED,PRESERVE,PRIMARY,PRIOR,PRIVILEGES,PROCEDURAL,PROCEDURE,PUBLIC,QUOTE,RANGE,RANK,READ,READS,REAL,REASSIGN,RECHECK,RECOVERY,RECURSIVE,REF,REFERENCES,REFERENCING,REGR_AVGX,REGR_AVGY,REGR_COUNT,REGR_INTERCEPT,REGR_R2,REGR_SLOPE,REGR_SXX,REGR_SXY,REGR_SYY,REINDEX,RELATIVE,RELEASE,RENAME,REPEATABLE,REPLACE,REPLICA,REQUIRING,RESET,RESPECT,RESTART,RESTORE,RESTRICT,RESULT,RETURN,RETURNED_CARDINALITY,RETURNED_LENGTH,RETURNED_OCTET_LENGTH,RETURNED_SQLSTATE,RETURNING,RETURNS,REVOKE,RIGHT,ROLE,ROLLBACK,ROLLUP,ROUTINE,ROUTINE_CATALOG,ROUTINE_NAME,ROUTINE_SCHEMA,ROW,ROWS,ROW_COUNT,ROW_NUMBER,RULE,SAVEPOINT,SCALE,SCHEMA,SCHEMA_NAME,SCOPE,SCOPE_CATALOG,SCOPE_NAME,SCOPE_SCHEMA,SCROLL,SEARCH,SECOND,SECTION,SECURITY,SELECT,SELECTIVE,SELF,SENSITIVE,SEQUENCE,SEQUENCES,SERIALIZABLE,SERVER,SERVER_NAME,SESSION,SESSION_USER,SET,SETOF,SETS,SHARE,SHOW,SIMILAR,SIMPLE,SIZE,SMALLINT,SNAPSHOT,SOME,SOURCE,SPACE,SPECIFIC,SPECIFICTYPE,SPECIFIC_NAME,SQL,SQLCODE,SQLERROR,SQLEXCEPTION,SQLSTATE,SQLWARNING,SQRT,STABLE,STANDALONE,START,STATE,STATEMENT,STATIC,STATISTICS,STDDEV_POP,STDDEV_SAMP,STDIN,STDOUT,STORAGE,STRICT,STRIP,STRUCTURE,STYLE,SUBCLASS_ORIGIN,SUBMULTISET,SUBSTRING,SUBSTRING_REGEX,SUCCEEDS,SUM,SYMMETRIC,SYSID,SYSTEM,SYSTEM_TIME,SYSTEM_USER,T,TABLE,TABLES,TABLESAMPLE,TABLESPACE,TABLE_NAME,TEMP,TEMPLATE,TEMPORARY,TEXT,THEN,TIES,TIME,TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE,TO,TOKEN,TOP_LEVEL_COUNT,TRAILING,TRANSACTION,TRANSACTIONS_COMMITTED,TRANSACTIONS_ROLLED_BACK,TRANSACTION_ACTIVE,TRANSFORM,TRANSFORMS,TRANSLATE,TRANSLATE_REGEX,TRANSLATION,TREAT,TRIGGER,TRIGGER_CATALOG,TRIGGER_NAME,TRIGGER_SCHEMA,TRIM,TRIM_ARRAY,TRUE,TRUNCATE,TRUSTED,TYPE,TYPES,UESCAPE,UNBOUNDED,UNCOMMITTED,UNDER,UNENCRYPTED,UNION,UNIQUE,UNKNOWN,UNLINK,UNLISTEN,UNLOGGED,UNNAMED,UNNEST,UNTIL,UNTYPED,UPDATE,UPPER,URI,USAGE,USER,USER_DEFINED_TYPE_CATALOG,USER_DEFINED_TYPE_CODE,USER_DEFINED_TYPE_NAME,USER_DEFINED_TYPE_SCHEMA,USING,VACUUM,VALID,VALIDATE,VALIDATOR,VALUE,VALUES,VALUE_OF,VARBINARY,VARCHAR,VARIADIC,VARYING,VAR_POP,VAR_SAMP,VERBOSE,VERSION,VERSIONING,VIEW,VOLATILE,WHEN,WHENEVER,WHERE,WHITESPACE,WIDTH_BUCKET,WINDOW,WITH,WITHIN,WITHOUT,WORK,WRAPPER,WRITE,XML,XMLAGG,XMLATTRIBUTES,XMLBINARY,XMLCAST,XMLCOMMENT,XMLCONCAT,XMLDECLARATION,XMLDOCUMENT,XMLELEMENT,XMLEXISTS,XMLFOREST,XMLITERATE,XMLNAMESPACES,XMLPARSE,XMLPI,XMLQUERY,XMLROOT,XMLSCHEMA,XMLSERIALIZE,XMLTABLE,XMLTEXT,XMLVALIDATE,YEAR,YES,ZONE"
							.split(","));
		}
	},
	ORACLE {
		@Override
		public int getDefaultPort() {
			return 1521;
		}

		@Override
		public List<String> getKeywords() {
			return Arrays
					.asList("ACCESS,ELSE,MODIFY,START,ADD,EXCLUSIVE,NOAUDIT,SELECT,ALL,EXISTS,NOCOMPRESS,SESSION,ALTER,FILE,NOT,SET,AND,FLOAT,NOTFOUND,SHARE,ANY,FOR,NOWAIT,SIZE,ARRAYLEN,FROM,NULL,SMALLINT,AS,GRANT,NUMBER,SQLBUF,ASC,GROUP,OF,SUCCESSFUL,AUDIT,HAVING,OFFLINE,SYNONYM,BETWEEN,IDENTIFIED,ON,SYSDATE,BY,IMMEDIATE,ONLINE,TABLE,CHAR,IN,OPTION,THEN,CHECK,INCREMENT,OR,TO,CLUSTER,INDEX,ORDER,TRIGGER,COLUMN,INITIAL,PCTFREE,UID,COMMENT,INSERT,PRIOR,UNION,COMPRESS,INTEGER,PRIVILEGES,UNIQUE,CONNECT,INTERSECT,PUBLIC,UPDATE,CREATE,INTO,RAW,USER,CURRENT,IS,RENAME,VALIDATE,DATE,LEVEL,RESOURCE,VALUES,DECIMAL,LIKE,REVOKE,VARCHAR,DEFAULT,LOCK,ROW,VARCHAR2,DELETE,LONG,ROWID,VIEW,DESC,MAXEXTENTS,ROWLABEL,WHENEVER,DISTINCT,MINUS,ROWNUM,WHERE,DROP,MODE,ROWS,WITH"
							.split(","));
		}

		@Override
		public String getJdbcUrl(String host, int port, String databaseName,
				String params) {
			StringBuilder sb = new StringBuilder(getJdbcUrlPrefix());
			sb.append(":thin:@//");
			sb.append(StringUtils.isNotBlank(host) ? host : "localhost");
			if (port > 0 && port != getDefaultPort())
				sb.append(":").append(port);
			sb.append("/").append(databaseName);
			return sb.toString();
		}

		@Override
		public String getValidationQuery() {
			return "SELECT 1 FROM DUAL";
		}
	},
	DB2 {
		@Override
		public int getDefaultPort() {
			return 50000;
		}

		@Override
		public List<String> getKeywords() {
			return Arrays
					.asList("ADD,AFTER,ALL,ALLOCATE,ALLOW,ALTER,AND,ANY,AS,ASENSITIVE,ASSOCIATE,ASUTIME,AT,AUDIT,AUX,AUXILIARY,BEFORE,BEGIN,BETWEEN,BUFFERPOOL,BY,CALL,CAPTURE,CASCADED,CASE,CAST,CCSID,CHAR,CHARACTER,CHECK,CLONE,CLOSE,CLUSTER,COLLECTION,COLLID,COLUMN,COMMENT,COMMIT,CONCAT,CONDITION,CONNECT,CONNECTION,CONSTRAINT,CONTAINS,CONTENT,CONTINUE,CREATE,CURRENT,CURRENT_DATE,CURRENT_LC_CTYPE,CURRENT_PATH,CURRENT_SCHEMA,CURRENT_TIME,CURRENT_TIMESTAMP,CURSOR,DATA,DATABASE,DAY,DAYS,DBINFO,DECLARE,DEFAULT,DELETE,DESCRIPTOR,DETERMINISTIC,DISABLE,DISALLOW,DISTINCT,DO,DOCUMENT,DOUBLE,DROP,DSSIZE,DYNAMIC,EDITPROC,ELSE,ELSEIF,ENCODING,ENCRYPTION,END,ENDING,END-EXEC2,ERASE,ESCAPE,EXCEPT,EXCEPTION,EXECUTE,EXISTS,EXIT,EXPLAIN,EXTERNAL,FENCED,FETCH,FIELDPROC,FINAL,FIRST,FOR,FREE,FROM,FULL,FUNCTION,GENERATED,GET,GLOBAL,GO,GOTO,GRANT,GROUP,HANDLER,HAVING,HOLD,HOUR,HOURS,IF,IMMEDIATE,IN,INCLUSIVE,INDEX,INHERIT,INNER,INOUT,INSENSITIVE,INSERT,INTERSECT,INTO,IS,ISOBID,ITERATE,JAR,JOIN,KEEP,KEY,LABEL,LANGUAGE,Start,of,changeLAST1End,of,change,LC_CTYPE,LEAVE,LEFT,LIKE,LOCAL,LOCALE,LOCATOR,LOCATORS,LOCK,LOCKMAX,LOCKSIZE,LONG,LOOP,MAINTAINED,MATERIALIZED,MICROSECOND,MICROSECONDS,MINUTE,MINUTES,MODIFIES,MONTH,MONTHS,Start,of,changeNEXT1End,of,change,NEXTVAL,NO,NONE,NOT,NULL,NULLS,NUMPARTS,OBID,OF,Start,of,changeOLD1End,of,change,ON,OPEN,OPTIMIZATION,OPTIMIZE,OR,ORDER,Start,of,changeORGANIZATION1End,of,change,OUT,OUTER,PACKAGE,PARAMETER,PART,PADDED,PARTITION,PARTITIONED,PARTITIONING,PATH,PIECESIZE,Start,of,changePERIOD1End,of,change,PLAN,PRECISION,PREPARE,PREVVAL,Start,of,changePRIOR1End,of,change,PRIQTY,PRIVILEGES,PROCEDURE,PROGRAM,PSID,PUBLIC,QUERY,QUERYNO,READS,REFERENCES,REFRESH,RESIGNAL,RELEASE,RENAME,REPEAT,RESTRICT,RESULT,RESULT_SET_LOCATOR,RETURN,RETURNS,REVOKE,RIGHT,ROLE,ROLLBACK,ROUND_CEILING,ROUND_DOWN,ROUND_FLOOR,ROUND_HALF_DOWN,ROUND_HALF_EVEN,ROUND_HALF_UP,ROUND_UP,ROW,ROWSET,RUN,SAVEPOINT,SCHEMA,SCRATCHPAD,SECOND,SECONDS,SECQTY,SECURITY,SEQUENCE,SELECT,SENSITIVE,SESSION_USER,SET,SIGNAL,SIMPLE,SOME,SOURCE,SPECIFIC,STANDARD,STATIC,STATEMENT,STAY,STOGROUP,STORES,STYLE,SUMMARY,SYNONYM,Start,of,changeSYSDATE1End,of,changeSYSTEM,Start,of,changeSYSTIMESTAMP1End,of,change,TABLE,TABLESPACE,THEN,TO,TRIGGER,TRUNCATE,TYPE,UNDO,UNION,UNIQUE,UNTIL,UPDATE,USER,USING,VALIDPROC,VALUE,VALUES,VARIABLE,VARIANT,VCAT,VIEW,VOLATILE,VOLUMES,WHEN,WHENEVER,WHERE,WHILE,WITH,WLM,XMLEXISTS,XMLNAMESPACES,XMLCAST,YEAR,YEARS,ZONE"
							.split(","));
		}

		@Override
		public String getJdbcUrl(String host, int port, String databaseName,
				String params) {
			StringBuilder sb = new StringBuilder(getJdbcUrlPrefix());
			sb.append("://");
			sb.append(StringUtils.isNotBlank(host) ? host : "localhost");
			if (port > 0 && port != getDefaultPort())
				sb.append(":").append(port);
			sb.append("/").append(databaseName);
			if (StringUtils.isNotBlank(params)) {
				if (!params.startsWith(";"))
					sb.append(";");
				sb.append(params);
			}
			return sb.toString();
		}

		@Override
		public String getValidationQuery() {
			return "VALUES 1";
		}
	},
	INFORMIX {
		@Override
		public int getDefaultPort() {
			return 1533;
		}

		@Override
		public List<String> getKeywords() {
			return Arrays
					.asList("AAO,ABS,ABSOLUTE,ACCESS,ACCESS_METHOD,ACCOUNT,ACOS,ACTIVE,ADD,ADDRESS,ADD_MONTHS,ADMIN,AFTER,AGGREGATE,ALIGNMENT,ALL,ALL_ROWS,ALLOCATE,ALTER,AND,ANSI,ANY,APPEND,ARRAY,AS,ASC,ASCII,ASIN,AT,ATAN,ATAN2,ATTACH,ATTRIBUTES,AUDIT,AUTHENTICATION,AUTHID,AUTHORIZATION,AUTHORIZED,AUTO,AUTOFREE,AUTO_REPREPARE,AUTO_STAT_MODE,AVG,AVOID_EXECUTE,AVOID_FACT,AVOID_FULL,AVOID_HASH,AVOID_INDEX,AVOID_INDEX_SJ,AVOID_MULTI_INDEX,AVOID_NL,AVOID_SUBQF,AVOID_STAR_JOIN,BARGROUP,BASED,BEFORE,BEGIN,BETWEEN,BIGINT,BIGSERIAL,BINARY,BITAND,BITANDNOT,BITNOT,BITOR,BITXOR,BLOB,BLOBDIR,BOOLEAN,BOTH,BOUND_IMPL_PDQ,BUFFERED,BUILTIN,BY,BYTE,CACHE,CALL,CANNOTHASH,CARDINALITY,CASCADE,CASE,CAST,CEIL,CHAR,CHAR_LENGTH,CHARACTER,CHARACTER_LENGTH,CHECK,CLASS,CLASS_ORIGIN,CLIENT,CLOB,CLOBDIR,CLOSE,CLUSTER,CLUSTERSIZE,COBOL,CODESET,COLLATION,COLLECTION,COLUMN,COLUMNS,COMMIT,COMMITTED,COMMUTATOR,COMPONENT,COMPONENTS,CONCAT,CONCURRENT,CONNECT,CONNECTION,CONNECTION_NAME,CONNECT_BY_ISCYCLE,CONNECT_BY_ISLEAF,CONNECT_BY_ROOTCONST,CONSTRAINT,CONSTRAINTS,CONSTRUCTOR,CONTEXT,CONTINUE,COPY,COS,COSTFUNC,COUNT,CRCOLS,CREATE,CROSS,CURRENT,CURRENT_ROLE,CURRVAL,CURSOR,CYCLE,DATABASE,DATAFILES,DATASKIP,DATE,DATETIME,DAY,DBA,DBDATE,DBINFO,DBPASSWORD,DBSA,DBSERVERNAME,DBSECADM,DBSSO,DEALLOCATE,DEBUG,DEBUGMODE,DEBUG_ENV,DEC,DECIMAL,DECLARE,DECODE,DECRYPT_BINARY,DECRYPT_CHAR,DEC_T,DEFAULT,DEFAULT_ROLE,DEFAULT_USER,DEFERRED,DEFERRED_PREPARE,DEFINE,DELAY,DELETE,DELETING,DELIMITED,DELIMITER,DELUXE,DESC,DESCRIBE,DESCRIPTOR,DETACH,DIAGNOSTICS,DIRECTIVES,DIRTY,DISABLE,DISABLED,DISCONNECT,DISK,DISTINCT,DISTRIBUTEBINARY,DISTRIBUTESREFERENCES,DISTRIBUTIONS,DOCUMENT,DOMAIN,DONOTDISTRIBUTE,DORMANT,DOUBLE,DROP,DTIME_T,EACH,ELIF,ELSE,ENABLED,ENCRYPT_AES,ENCRYPT_TDES,ENCRYPTION,END,ENUM,ENVIRONMENT,ERROR,ESCAPE,EXCEPTION,EXCLUSIVE,EXEC,EXECUTE,EXECUTEANYWHERE,EXEMPTION,EXISTS,EXIT,EXP,EXPLAIN,EXPLICIT,EXPRESS,EXPRESSION,EXTDIRECTIVES,EXTEND,EXTENT,EXTERNAL,FACT,FALSE,FAR,FETCH,FILE,FILETOBLOB,FILETOCLOB,FILLFACTOR,FILTERING,FIRST,FIRST_ROWS,FIXCHAR,FIXED,FLOAT,FLOOR,FLUSH,FOR,FORCE,FORCED,FORCE_DDL_EXEC,FOREACH,FOREIGN,FORMAT,FORMAT_UNITS,FORTRAN,FOUND,FRACTION,FRAGMENT,FRAGMENTS,FREE,FROM,FULL,FUNCTION,GENERAL,GET,GETHINT,GLOBAL,GO,GOTO,GRANT,GREATERTHAN,GREATERTHANOREQUAL,GROUP,HANDLESNULLS,HASH,HAVING,HDR,HEX,HIGH,HINT,HOLD,HOME,HOUR,IDSLBACREADARRAY,IDSLBACREADSET,IDSLBACREADTREE,IDSLBACRULES,IDSLBACWRITEARRAY,IDSLBACWRITESET,IDSLBACWRITETREE,IDSSECURITYLABEL,IF,IFX_AUTO_REPREPARE,IFX_BATCHEDREAD_TABLE,IFX_INT8_T,IFX_LO_CREATE_SPEC_T,IFX_LO_STAT_T,IMMEDIATE,IMPLICIT,IMPLICIT_PDQ,IN,INACTIVE,INCREMENT,INDEX,INDEXES,INDEX_ALL,INDEX_SJ,INDICATOR,INFORMIX,INIT,INITCAP,INLINE,INNER,INOUT,INSENSITIVE,INSERT,INSERTING,INSTEAD,INT,INT8,INTEG,INTEGER,INTERNAL,INTERNALLENGTH,INTERVAL,INTO,INTRVL_T,IS,ISCANONICAL,ISOLATION,ITEM,ITERATOR,JAVA,JOIN,KEEP,KEY,LABEL,LABELEQ,LABELGE,LABELGLB,LABELGT,LABELLE,LABELLT,LABELLUB,LABELTOSTRING,LANGUAGE,LAST,LAST_DAY,LEADING,LEFT,LENGTH,LESSTHAN,LESSTHANOREQUAL,LET,LEVEL,LIKE,LIMIT,LIST,LISTING,LOAD,LOCAL,LOCATOR,LOCK,LOCKS,LOCOPY,LOC_T,LOG,LOG10,LOGN,LONG,LOOP,LOTOFILE,LOW,LOWER,LPAD,LTRIM,LVARCHAR,MATCHED,MATCHES,MAX,MAXERRORS,MAXLEN,MAXVALUE,MDY,MEDIAN,MEDIUM,MEMORY,MEMORY_RESIDENT,MERGE,MESSAGE_LENGTH,MESSAGE_TEXT,MIDDLE,MIN,MINUTE,MINVALUE,MOD,MODE,MODERATE,MODIFY,MODULE,MONEY,MONTH,MONTHS_BETWEEN,MOUNTING,MULTISET,MULTI_INDEX,NAME,NCHAR,NEGATOR,NEW,NEXT,NEXT_DAY,NEXTVAL,NLSCASE,NO,NOCACHE,NOCYCLE,NOMAXVALUE,NOMIGRATE,NOMINVALUE,NONE,NON_RESIDENT,NON_DIM,NOORDER,NORMAL,NOT,NOTEMPLATEARG,NOTEQUAL,NULL,NULLIF,NUMERIC,NUMROWS,NUMTODSINTERVAL,NUMTOYMINTERVAL,NVARCHAR,NVL,OCTET_LENGTH,OF,OFF,OLD,ON,ONLINE,ONLY,OPAQUE,OPCLASS,OPEN,OPTCOMPIND,OPTICAL,OPTIMIZATION,OPTION,OR,ORDER,ORDERED,OUT,OUTER,OUTPUT,OVERRIDE,PAGE,PARALLELIZABLE,PARAMETER,PARTITION,PASCAL,PASSEDBYVALUE,PASSWORD,PDQPRIORITY,PERCALL_COST,PIPE,PLI,PLOAD,POLICY,POW,POWER,PRECISION,PREPARE,PREVIOUS,PRIMARY,PRIOR,PRIVATE,PRIVILEGES,PROCEDURE,PROPERTIES,PUBLIC,PUT,RAISE,RANGE,RAW,READ,REAL,RECORDEND,REFERENCES,REFERENCING,REGISTER,REJECTFILE,RELATIVE,RELEASE,REMAINDER,RENAME,REOPTIMIZATION,REPEATABLE,REPLACE,REPLICATION,RESERVE,RESOLUTION,RESOURCE,RESTART,RESTRICT,RESUME,RETAIN,RETAINUPDATELOCKS,RETURN,RETURNED_SQLSTATE,RETURNING,RETURNS,REUSE,REVOKE,RIGHT,ROBIN,ROLE,ROLLBACK,ROLLFORWARD,ROOT,ROUND,ROUTINE,ROW_COUNT,ROW,ROWID,ROWIDS,ROWS,RPAD,RTRIM,RULE,SAMEAS,SAMPLES,SAMPLING,SAVE,SAVEPOINT,SCHEMA,SCROLL,SECLABEL_BY_COMP,SECLABEL_BY_NAME,SECLABEL_TO_CHAR,SECOND,SECONDARY,SECURED,SECURITY,SECTION,SELCONST,SELECT,SELECTING,SELFUNC,SELFUNCARGS,SENSITIVE,SEQUENCE,SERIAL,SERIAL8,SERIALIZABLE,SERVER_NAME,SERVERUUID,SESSION,SET,SETSESSIONAUTH,SHARE,SHORT,SIBLINGS,SIGNED,SIN,SITENAME,SIZE,SKALL,SKINHIBIT,SKIP,SKSHOW,SMALLFLOAT,SMALLINT,SOME,SPECIFIC,SQL,SQLCODE,SQLCONTEXT,SQLERROR,SQLSTATE,SQLWARNING,SQRT,STABILITY,STACK,STANDARD,START,STAR_JOIN,STATCHANGE,STATEMENT,STATIC,STATISTICS,STATLEVEL,STATUS,STDEV,STEP,STOP,STORAGE,STORE,STRATEGIES,STRING,STRINGTOLABEL,STRUCT,STYLE,SUBCLASS_ORIGIN,SUBSTR,SUBSTRING,SUM,SUPPORT,SYNC,SYNONYM,SYSDATE,SYSDBCLOSE,SYSDBOPEN,SYSTEM,SYS_CONNECT_BY_PATH,TABLE,TABLES,TAN,TASK,TEMP,TEMPLATE,TEST,TEXT,THEN,TIME,TIMEOUT,TO,TODAY,TO_CHAR,TO_DATE,TO_DSINTERVAL,TO_NUMBER,TO_YMINTERVAL,TRACE,TRAILING,TRANSACTION,TRANSITION,TREE,TRIGGER,TRIGGERS,TRIM,TRUE,TRUNC,TRUNCATE,TRUSTED,TYPE,TYPEDEF,TYPEID,TYPENAME,TYPEOF,UID,UNCOMMITTED,UNDER,UNION,UNIQUE,UNITS,UNKNOWN,UNLOAD,UNLOCK,UNSIGNED,UPDATE,UPDATING,UPON,UPPER,USAGE,USE,USELASTCOMMITTED,USER,USE_HASH,USE_NL,USE_SUBQF,USING,VALUE,VALUES,VAR,VARCHAR,VARIABLE,VARIANCE,VARIANT,VARYING,VERCOLS,VIEW,VIOLATIONS,VOID,VOLATILE,WAIT,WARNING,WEEKDAY,WHEN,WHENEVER,WHERE,WHILE,WITH,WITHOUT,WORK,WRITE,WRITEDOWN,WRITEUP,XADATASOURCE,XID,XLOAD,XUNLOAD,YEAR"
							.split(","));
		}

		@Override
		public String getJdbcUrl(String host, int port, String databaseName,
				String params) {
			StringBuilder sb = new StringBuilder(getJdbcUrlPrefix());
			sb.append("-sqli://");
			sb.append(StringUtils.isNotBlank(host) ? host : "localhost");
			if (port > 0 && port != getDefaultPort())
				sb.append(":").append(port);
			sb.append("/").append(databaseName);
			if (StringUtils.isNotBlank(params))
				sb.append(":").append(params);
			return sb.toString();
		}

		@Override
		public String getValidationQuery() {
			return "SELECT FIRST 1 CURRENT FROM SYSTABLES";
		}
	},
	SQLSERVER {
		@Override
		public int getDefaultPort() {
			return 1433;
		}

		@Override
		public List<String> getKeywords() {
			return Arrays
					.asList("ADD,EXTERNAL,PROCEDURE,ALL,FETCH,PUBLIC,ALTER,FILE,RAISERROR,AND,FILLFACTOR,READ,ANY,FOR,READTEXT,AS,FOREIGN,RECONFIGURE,ASC,FREETEXT,REFERENCES,AUTHORIZATION,FREETEXTTABLE,REPLICATION,BACKUP,FROM,RESTORE,BEGIN,FULL,RESTRICT,BETWEEN,FUNCTION,RETURN,BREAK,GOTO,REVERT,BROWSE,GRANT,REVOKE,BULK,GROUP,RIGHT,BY,HAVING,ROLLBACK,CASCADE,HOLDLOCK,ROWCOUNT,CASE,IDENTITY,ROWGUIDCOL,CHECK,IDENTITY_INSERT,RULE,CHECKPOINT,IDENTITYCOL,SAVE,CLOSE,IF,SCHEMA,CLUSTERED,IN,SECURITYAUDIT,COALESCE,INDEX,SELECT,COLLATE,INNER,SEMANTICKEYPHRASETABLE,COLUMN,INSERT,SEMANTICSIMILARITYDETAILSTABLE,COMMIT,INTERSECT,SEMANTICSIMILARITYTABLE,COMPUTE,INTO,SESSION_USER,CONSTRAINT,IS,SET,CONTAINS,JOIN,SETUSER,CONTAINSTABLE,KEY,SHUTDOWN,CONTINUE,KILL,SOME,CONVERT,LEFT,STATISTICS,CREATE,LIKE,SYSTEM_USER,CROSS,LINENO,TABLE,CURRENT,LOAD,TABLESAMPLE,CURRENT_DATE,MERGE,TEXTSIZE,CURRENT_TIME,NATIONAL,THEN,CURRENT_TIMESTAMP,NOCHECK,TO,CURRENT_USER,NONCLUSTERED,TOP,CURSOR,NOT,TRAN,DATABASE,NULL,TRANSACTION,DBCC,NULLIF,TRIGGER,DEALLOCATE,OF,TRUNCATE,DECLARE,OFF,TRY_CONVERT,DEFAULT,OFFSETS,TSEQUAL,DELETE,ON,UNION,DENY,OPEN,UNIQUE,DESC,OPENDATASOURCE,UNPIVOT,DISK,OPENQUERY,UPDATE,DISTINCT,OPENROWSET,UPDATETEXT,DISTRIBUTED,OPENXML,USE,DOUBLE,OPTION,USER,DROP,OR,VALUES,DUMP,ORDER,VARYING,ELSE,OUTER,VIEW,END,OVER,WAITFOR,ERRLVL,PERCENT,WHEN,ESCAPE,PIVOT,WHERE,EXCEPT,PLAN,WHILE,EXEC,PRECISION,WITH,EXECUTE,PRIMARY,WITHIN,GROUP,EXISTS,PRINT,WRITETEXT,EXIT,PROC"
							.split(","));
		}

		@Override
		public String getJdbcUrl(String host, int port, String databaseName,
				String params) {
			StringBuilder sb = new StringBuilder(getJdbcUrlPrefix());
			sb.append("://");
			sb.append(StringUtils.isNotBlank(host) ? host : "localhost");
			if (port > 0 && port != getDefaultPort())
				sb.append(":").append(port);
			sb.append(";DatabaseName=").append(databaseName);
			return sb.toString();
		}
	},
	SYBASE {
		@Override
		public int getDefaultPort() {
			return 7100;
		}

		@Override
		public List<String> getKeywords() {
			return Arrays
					.asList("ACTIVE,ADD,ALL,ALGORITHM,ALTER,AND,ANY,APPEND,AS,ASC,AUTO,BACKUP,BEGIN,BETWEEN,BIGINT,BINARY,BIT,BOTTOM,BREAK,BY,CALIBRATE,CALIBRATION,CALL,CANCEL,CAPABILITY,CASCADE,CASE,CAST,CERTIFICATE,CHAR,CHAR_CONVERT,CHARACTER,CHECK,CHECKPOINT,CHECKSUM,CLIENTPORT,CLOSE,COLUMNS,COMMENT,COMMIT,COMMITTED,COMPARISONS,COMPUTES,CONFLICT,CONNECT,CONSTRAINT,CONTAINS,CONTINUE,CONVERT,CREATE,CROSS,CUBE,CURRENT,CURRENT_TIMESTAMP,CURRENT_USER,CURSOR,DATE,DBSPACE,DBSPACENAME,DEALLOCATE,DEBUG,DEC,DECIMAL,DECLARE,DECOUPLED,DECRYPTED,DEFAULT,DELAY,DELETE,DELETING,DENSITY,DESC,DETERMINISTIC,DISABLE,DISTINCT,DO,DOUBLE,DROP,DYNAMIC,ELEMENTS,ELSE,ELSEIF,ENABLE,ENCAPSULATED,ENCRYPTED,END,ENDIF,ESCAPE,EXCEPT,EXCEPTION,EXCLUDE,EXEC,EXECUTE,EXISTING,EXISTS,EXPLICIT,EXPRESS,EXTERNLOGIN,FASTFIRSTROW,FETCH,FIRST,FLOAT,FOLLOWING,FOR,FORCE,FOREIGN,FORWARD,FROM,FULL,GB,GOTO,GRANT,GROUP,GROUPING,HAVING,HIDDEN,HISTORY,HOLDLOCK,IDENTIFIED,IF,IN,INACTIVE,INDEX,INDEX_LPAREN,INNER,INOUT,INPUT,INSENSITIVE,INSERT,INSERTING,INSTALL,INSTEAD,INT,INTEGER,INTEGRATED,INTERSECT,INTO,IQ,IS,ISOLATION,JDK,JOIN,KB,KEY,LATERAL,LEFT,LIKE,LOCK,LOGGING,LOGIN,LONG,MB,MATCH,MEMBERSHIP,MESSAGE,MODE,MODIFY,NAMESPACE,NATURAL,NEW,NO,NOHOLDLOCK,NOLOCK,NOT,NOTIFY,NULL,NUMERIC,OF,OFF,ON,OPEN,OPTIMIZATION,OPTION,OPTIONS,OR,ORDER,OTHERS,OUT,OUTER,OVER,PAGES,PAGLOCK,PARTIAL,PARTITION,PASSTHROUGH,PASSWORD,PLAN,PRECEDING,PRECISION,PREPARE,PRIMARY,PRINT,PRIVILEGES,PROC,PROCEDURE,PROXY,PUBLICATION,RAISERROR,RANGE,RAW,READCOMMITTED,READONLY,READPAST,READTEXT,READUNCOMMITTED,READWRITE,REAL,RECURSIVE,REFERENCE,REFERENCES,RELEASE,RELOCATE,REMOTE,REMOVE,RENAME,REORGANIZE,REPEATABLE,REPEATABLEREAD,RESERVE,RESIZING,RESOURCE,RESTORE,RESTRICT,RETURN,REVOKE,RIGHT,ROLLBACK,ROLLUP,ROOT,ROW,ROWLOCK,ROWS,SAVE,SAVEPOINT,SCHEDULE,SCROLL,SECURE,SELECT,SENSITIVE,SERIALIZABLE,SERVICE,SESSION,SET,SETUSER,SHARE,SMALLINT,SOAPACTION,SOME,SPACE,SQLCODE,SQLSTATE,START,STOP,SUBTRANS,SUBTRANSACTION,SYNCHRONIZE,SYNTAX_ERROR,TABLE,TABLOCK,TABLOCKX,TB,TEMPORARY,THEN,TIES,TIME,TIMESTAMP,TINYINT,TO,TOP,TRAN,TRANSACTION,TRANSACTIONAL,TRANSFER,TRIES,TRIGGER,TRUNCATE,TSEQUAL,UNBOUNDED,UNCOMMITTED,UNION,UNIQUE,UNIQUEIDENTIFIER,UNKNOWN,UNSIGNED,UPDATE,UPDATING,UPDLOCK,URL,USER,UTC,USING,VALIDATE,VALUES,VARBINARY,VARCHAR,VARIABLE,VARYING,VIRTUAL,VIEW,WAIT,WAITFOR,WEB,WHEN,WHERE,WHILE,WINDOW,WITH,WITHAUTO,WITH_CUBE,WITH_LPAREN,WITH_ROLLUP,WITHIN,WORD,WORK,WRITESERVER,WRITETEXT,XLOCK,XML"
							.split(","));
		}

		@Override
		public String getJdbcUrlPrefix() {
			return "jdbc:sybase:Tds";
		}

		@Override
		public String getJdbcUrl(String host, int port, String databaseName,
				String params) {
			StringBuilder sb = new StringBuilder(getJdbcUrlPrefix());
			sb.append(":");
			sb.append(StringUtils.isNotBlank(host) ? host : "localhost");
			if (port > 0 && port != getDefaultPort())
				sb.append(":").append(port);
			sb.append("/").append(databaseName);
			return sb.toString();
		}
	},
	H2 {
		@Override
		public int getDefaultPort() {
			return 9092;
		}

		@Override
		public String getJdbcUrl(String host, int port, String databaseName,
				String params) {
			StringBuilder sb = new StringBuilder(getJdbcUrlPrefix());
			sb.append(":tcp://");
			sb.append(StringUtils.isNotBlank(host) ? host : "localhost");
			if (port > 0 && port != getDefaultPort())
				sb.append(":").append(port);
			sb.append("/").append(databaseName);
			return sb.toString();
		}
	},
	HSQL {
		@Override
		public int getDefaultPort() {
			return 9001;
		}

		@Override
		public String getJdbcUrlPrefix() {
			return "jdbc:hsqldb";
		}

		@Override
		public String getJdbcUrl(String host, int port, String databaseName,
				String params) {
			StringBuilder sb = new StringBuilder(getJdbcUrlPrefix());
			sb.append(":hsql://");
			sb.append(StringUtils.isNotBlank(host) ? host : "localhost");
			if (port > 0 && port != getDefaultPort())
				sb.append(":").append(port);
			sb.append("/").append(databaseName);
			return sb.toString();
		}

		@Override
		public String getValidationQuery() {
			return "SELECT 1 FROM INFORMATION_SCHEMA.SYSTEM_USERS";
		}
	},
	DERBY {
		@Override
		public int getDefaultPort() {
			return 1527;
		}

		@Override
		public String getJdbcUrl(String host, int port, String databaseName,
				String params) {
			StringBuilder sb = new StringBuilder(getJdbcUrlPrefix());
			sb.append("://");
			sb.append(StringUtils.isNotBlank(host) ? host : "localhost");
			if (port > 0 && port != getDefaultPort())
				sb.append(":").append(port);
			sb.append("/").append(databaseName);
			if (StringUtils.isNotBlank(params)) {
				if (!params.startsWith(";"))
					sb.append(";");
				sb.append(params);
			}
			return sb.toString();
		}

		@Override
		public String getValidationQuery() {
			return "SELECT 1 FROM SYSIBM.SYSDUMMY1";
		}
	};

	public static DatabaseProduct parse(String nameOrUrl) {
		nameOrUrl = nameOrUrl.trim();
		if (nameOrUrl.toLowerCase().startsWith("jdbc:")) {
			for (DatabaseProduct p : values())
				if (nameOrUrl.startsWith(p.getJdbcUrlPrefix()))
					return p;
			return null;
		} else {
			if (nameOrUrl.toLowerCase().contains("mysql"))
				return MYSQL;
			else if (nameOrUrl.toLowerCase().contains("postgres"))
				return POSTGRESQL;
			else if (nameOrUrl.toLowerCase().contains("oracle"))
				return ORACLE;
			else if (nameOrUrl.toLowerCase().startsWith("db2"))
				return DB2;
			else if (nameOrUrl.toLowerCase().contains("informix"))
				return INFORMIX;
			else if (nameOrUrl.toLowerCase().contains("microsoft"))
				return SQLSERVER;
			else if (nameOrUrl.toLowerCase().contains("sql server")
					|| nameOrUrl.equals("Adaptive Server Enterprise")
					|| nameOrUrl.equals("ASE"))
				return SYBASE;
			else if (nameOrUrl.toLowerCase().equals("h2"))
				return H2;
			else if (nameOrUrl.toLowerCase().contains("hsql"))
				return HSQL;
			else if (nameOrUrl.toLowerCase().contains("derby"))
				return DERBY;
		}
		return null;
	}

	public abstract int getDefaultPort();

	public List<String> getKeywords() {
		return Collections.emptyList();
	}

	public String getValidationQuery() {
		return "SELECT 1";
	}

	public String getJdbcUrlPrefix() {
		return "jdbc:" + name().toLowerCase();
	}

	public String getJdbcUrl(String host, int port, String databaseName,
			String params) {
		StringBuilder sb = new StringBuilder(getJdbcUrlPrefix());
		sb.append("://");
		sb.append(StringUtils.isNotBlank(host) ? host : "localhost");
		if (port > 0 && port != getDefaultPort())
			sb.append(":").append(port);
		sb.append("/").append(databaseName);
		if (StringUtils.isNotBlank(params))
			sb.append("?").append(params);
		return sb.toString();
	}

}
