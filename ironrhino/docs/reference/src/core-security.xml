<chapter id="core-security">
	<title>安全框架</title>
	<para>
		ironrhino的安全框架是在spring security之上构建的,包含了一个简单的用户管理系统,只需要将ironrhino-security.jar包放入WEB-INF/lib,就可以把自己的应用程序保护起来
	</para>
	<para>
    	内置一个管理员角色,如果用户需要增加自己的角色,请参考如下代码
		<programlisting>
		<![CDATA[
package com.mycompany.model;

public interface UserRole extends org.ironrhino.security.model.UserRole {

			public static final String ROLE_WAREHOUSEMAN = "ROLE_WAREHOUSEMAN";
			public static final String ROLE_SALESMAN = "ROLE_SALESMAN";
			public static final String ROLE_HR = "ROLE_HR";

}
		]]>
		</programlisting>
    	写一个接口继承org.ironrhino.security.model.UserRole,接口名随便,里面有静态String成员以ROLE_开头(Spring Security默认要求的),这样在编辑用户的时候可以看到多了三个角色可以选择(可以在resource/i18n/mycompany/messages_zh_CN.properties加入角色名的中文名)
	</para>
	<para>
		控制action的权限,使用@Authorize,参数的意义可以参考spring security的Authorize jsg标签,可以打在方法上,如果方法上没有则查找类上有没有,这样可以控制什么角色的用户可以访问
		<programlisting>
		<![CDATA[
			package com.mycompany.action;

			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.List;

			import javax.inject.Inject;

			import org.apache.commons.lang.StringUtils;
			import org.ironrhino.core.metadata.Authorize;
			import org.compass.core.CompassHit;
			import org.compass.core.support.search.CompassSearchResults;
			import org.hibernate.criterion.DetachedCriteria;
			import org.hibernate.criterion.Restrictions;
			import org.ironrhino.core.model.ResultPage;
			import org.ironrhino.core.search.compass.CompassCriteria;
			import org.ironrhino.core.search.compass.CompassSearchService;
			import org.ironrhino.core.struts.BaseAction;

			import com.mycompany.model.UserRole;
			import com.mycompany.model.Customer;
			import com.mycompany.service.CustomerManager;

			@Authorize(ifAnyGranted = UserRole.ROLE_SALESMAN)
			public class CustomerAction extends BaseAction {

				private static final long serialVersionUID = 4331302727890834065L;

				private ResultPage<Customer> resultPage;

				@Inject
				private transient CustomerManager customerManager;

				public ResultPage<Customer> getResultPage() {
					return resultPage;
				}

				public void setResultPage(ResultPage<Customer> resultPage) {
					this.resultPage = resultPage;
				}

				@Override
				public String execute() {
					DetachedCriteria dc = customerManager.detachedCriteria();
					if (resultPage == null)
						resultPage = new ResultPage<Customer>();
					resultPage.setDetachedCriteria(dc);
					resultPage.addOrder(org.hibernate.criterion.Order.asc("name"));
					resultPage = customerManager.findByResultPage(resultPage);
					return LIST;
				}

				@Authorize(ifAnyGranted = UserRole.ROLE_ADMINISTRATOR)
				public String delete() {
					customerManager.delete(customerManager.get(getUid()));
					return SUCCESS;
				}

			}
		]]>
		</programlisting>
		以上实例表明ROLE_SALESMAN可以查看customer列表,但是需要ROLE_ADMINISTRATOR才可以删除customer
	</para>
	<para>
		ftl模板可以这样使用
		<programlisting>
		<![CDATA[
			<@authorize ifAnyGranted = "ROLE_ADMINISTRATOR">
				<a href="/customer">customers</a>
			</@authorize>
		]]>
		</programlisting>
		jsp使用spring security的authorize tag就可以
	</para>
	<para>
		如果ironrhino-security-loginrecord.jar包也放入WEB-INF/lib,就可以记录用户的登录行为,访问 /loginRecord试试看
	</para>
	<para>
		高级用户可以参考ironrhino-security.jar定制自己的用户系统和配置自己的applicationContext-security.xml
	</para>


	<para>
    	另外，在框架中已经定义了默认角色
		<programlisting>
		<![CDATA[
			package org.ironrhino.security.model;

			public interface UserRole { {

				public static final String ROLE_BUILTIN_ANONYMOUS = "ROLE_BUILTIN_ANONYMOUS";
				public static final String ROLE_BUILTIN_USER = "ROLE_BUILTIN_USER";
				public static final String ROLE_ADMINISTRATOR = "ROLE_ADMINISTRATOR";

			}
		]]>
		</programlisting>
	</para>
	<para>
	<![CDATA[
		Web层action类中权限设置:
		1、 在需要配置权限的action方法前面标注
		    @Authorize(authorizer = AclDynamicAuthorizer.class)
		2、 访问permit?role=ROLE_角色名称, 可以对指定角色进行授权;
			访问permit?username=用户名, 可以对指定用户进行授权;
	]]>
	</para>
	<para>
		页面ftl模板写法：
		<programlisting>
		<![CDATA[
			<@authorize authorizer="org.ironrhino.security.acl.component.AclDynamicAuthorizer" resource="/user/password"> 
				<li><a href="<@url value="${ssoServerBase!}/user/password"/>">${action.getText('change')}${action.getText('password')}</a></li>
			</@authorize>
		]]>
		</programlisting>
		resource="..."引号中间是需要设置权限访问控制的URI
	</para>

</chapter>


