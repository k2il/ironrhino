<chapter id="advanced-session">
	<title>session管理</title>
	<para>
    	ironrhino使用加密cookie来保存session,加密算法使用blowfish,密钥放在在src/resources/key/blowfish,
    	生产环境推荐将密钥放到${user.home}/ironrhino/key/blowfish,这里ironrhino根据你自己的项目的web.xml的displayName名称定
    	在applicationContext.properties里面配置 httpSessionManager.maxInactiveInterval=43200 ,单位是分钟,表明只要用户不关闭浏览器,session可以至少保持12个小时,也就是用户登录后,如果在12个小时没有第二次访问,但是只要浏览器未关闭,则还是保持登录状态,超过12个小时就需要重新登录
	</para>
	<para>
ironrhino将session压缩成Map&lt;String,String&gt;在序列化成json加密放到cookie,因此不推荐开发者往session里面存数据,如果需要存但又不是String类型,则需要写自己的SessionCompressor否则会被丢弃,可以参考内置的存放spring security context的SessionCompressor
		<programlisting>
		<![CDATA[

package org.ironrhino.core.session.impl;

import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Singleton;

import org.ironrhino.core.session.SessionCompressor;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextImpl;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.web.context.HttpSessionSecurityContextRepository;

@Singleton
@Named
public class SecurityContextSessionCompressor implements
				SessionCompressor<SecurityContext> {

			@Inject
			private UserDetailsService userDetailsService;

			public boolean supportsKey(String key) {
				return HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY
						.equals(key);
			}

			public String compress(SecurityContext sc) {
				if (sc != null) {
					Authentication auth = sc.getAuthentication();
					if (auth != null && auth.isAuthenticated())
						return auth.getName();
				}
				return null;
			}

			public SecurityContext uncompress(String username) {
				if (username != null) {
					UserDetails ud = null;
					try {
						ud = userDetailsService.loadUserByUsername(username);
					} catch (UsernameNotFoundException e) {
						return null;
					}
					if (ud != null) {
						SecurityContext sc = new SecurityContextImpl();
						Authentication auth = new UsernamePasswordAuthenticationToken(
								ud, ud.getPassword(), ud.getAuthorities());
						sc.setAuthentication(auth);
						return sc;
					}
				}
				return null;
			}
}


		]]>
		</programlisting>
	</para> 
</chapter>


