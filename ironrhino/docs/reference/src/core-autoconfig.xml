<chapter id="core-autoconfig">
	<title>自动配置</title>
	<sect1 id="core-autoconfig-urlmapping">
		<title>url映射规则</title>
		<para>
			<table>
				<title>拿customer来举例</title>
				<tgroup cols="2">
					<colspec colname="c1" colwidth="3*" />
					<colspec colname="c2" colwidth="5*" />
					<thead>
						<row>
							<entry>url</entry>
							<entry>action方法</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>
								<literal>/customer</literal>
							</entry>
							<entry>对应到
								<literal>CustomerAction</literal>的
								<literal>execute()</literal>方法
							</entry>
						</row>
						<row>
							<entry>
								<literal>/customer/input</literal>
							</entry>
							<entry>对应到
								<literal>CustomerAction</literal>的
								<literal>input()</literal>方法
							</entry>
						</row>
						<row>
							<entry>
								<literal>/customer/input/xxx</literal>
							</entry>
							<entry>相当于/customer/input?id=xxx,对应到
								<literal>CustomerAction</literal>的
								<literal>input()</literal>方法,并且
								<literal>getUid()</literal>会得到xxx,
								<literal>getId()</literal>会得到元素为xxx的数组
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</para>
	</sect1>
	<sect1 id="core-autoconfig-resultmapping">
		<title>result映射规则</title>
		<para>
			<table>
				<title>拿customer来举例</title>
				<tgroup cols="2">
					<colspec colname="c1" colwidth="3*" />
					<colspec colname="c2" colwidth="5*" />
					<thead>
						<row>
							<entry>result</entry>
							<entry>模板位置</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>
								<literal>success</literal>
							</entry>
							<entry>
								如果是<literal>execute()</literal>方法里面返回success,先去找/WEB-INF/view/jsp/customer.jsp,没有继续找/WEB-INF/view/ftl/customer.ftl,还没有就找classpath里面的/resources/view/customer.ftl
								如果不是<literal>execute()</literal>方法里返回suceess,则是外部重定向到/customer
							</entry>
						</row>
						<row>
							<entry>
								<literal>input</literal>
							</entry>
							<entry>先去找/WEB-INF/view/jsp/customer_input.jsp,没有继续找/WEB-INF/view/ftl/customer_input.ftl,还没有就找classpath里面的/resources/view/customer_input.ftl</entry>
						</row>
						<row>
							<entry>
								<literal>xxx</literal>
							</entry>
							<entry>先去找/WEB-INF/view/jsp/customer_xxx.jsp,没有继续找/WEB-INF/view/ftl/customer_xxx.ftl,还没有就找classpath里面的/resources/view/customer_xxx.ftl</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</para>
	</sect1>
	<sect1 id="core-autoconfig-inputconfig">
		<title>@InputConfig的使用</title>
		<para>
			<table>
				<title>此annotaion本是ironrhino的,已上贡到xwork官方代码,控制校验失败后的流程</title>
				<tgroup cols="2">
					<colspec colname="c1" colwidth="3*" />
					<colspec colname="c2" colwidth="5*" />
					<thead>
						<row>
							<entry>配置</entry>
							<entry>結果</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>
								<literal>@InputConfig(resultName="fail")</literal>
							</entry>
							<entry>
								会返回fail的result
							</entry>
						</row>
						<row>
							<entry>
								<literal>@InputConfig(methodName="fail")</literal>
							</entry>
							<entry>会执行fail()并返回它的result,在fail()里面可以做数据填充提供给页面渲染</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</para>
		<para>
			在ironrhino里面@InputConfig还提供一个很常用的小功能,如果是GET请求则内部重定向到表单输入页面,如果是POST请求则执行,好处是对外统一成一个url
			<programlisting>
			<![CDATA[        	
package com.mycompany.action;

import org.ironrhino.core.struts.BaseAction;

public class CustomerAction extends BaseAction {

...

@InputConfig(methodName="inputChangeName")
public String changeName(){
//do change name
return SUCCESS;
}

public String inputChangeName(){
//do some data filling
//customer = customerManager.get(getUid());
return "changeName";
}
						
}
			]]>      	
			</programlisting>
当用户访问/customer/changeName的时候,会出现表单输入页面,用户POST提交表单时候才会真正执行changeName()方法
		</para>
	</sect1>
	
	<sect1 id="core-autoconfig-autoconfig">
		<title>@AutoConfig的使用</title>
		<para>
			自动扫描的package在struts.xml里面配置
				<programlisting>
					<![CDATA[
<constant name="ironrhino.autoconfig.packages" value="/common:org.ironrhino.common;org.ironrhino.security,com.mycompany" />
					]]>
					</programlisting>
			org.ironrhino.common下面@AutoConfig类的默认namespace是/common,org.ironrhino.security和com.mycompany下面@AutoConfig类默认的namespace是/
		</para>
		<para>
			<table>
				<title>此annotaion可以放到action的类上面,也可以放到model的类上面,放到Customer上面会自动找CustomerAction,找不到会用ironrhino内置的EntityAction</title>
				<tgroup cols="2">
					<colspec colname="c1" colwidth="3*" />
					<colspec colname="c2" colwidth="5*" />
					<thead>
						<row>
							<entry>配置项</entry>
							<entry>結果</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>
								namespace
							</entry>
							<entry>
								struts2 action的namespace,默认使用struts.xml里面配置的
							</entry>
						</row>
						<row>
							<entry>
								actionName
							</entry>
							<entry>struts2 action的actionName,默认是model类小写头字母,比如Customer就是customer</entry>
						</row>
						<row>
							<entry>
								fileupload
							</entry>
							<entry>文件上传的允许的MIME类型</entry>
						</row>
						<row>
							<entry>
								readonly
							</entry>
							<entry>打在model类上面有效,表明此model只读</entry>
						</row>
						<row>
							<entry>
								searchable
							</entry>
							<entry>打在model类上面有效,表明此model可搜索</entry>
						</row>
						<row>
							<entry>
								order
							</entry>
							<entry>打在model类上面有效,列表排序,比如 name desc,就是按name倒序</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</para>
	</sect1>
</chapter>


