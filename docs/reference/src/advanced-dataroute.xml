<chapter id="advanced-dataroute">
	<title>数据路由</title>
	<para>
		数据源配置,以下配置了两个数据库集群,一个是mainGroup,一个是miscGroup,每个组又包含一个主数据库和几个从数据库,从数据库可读可写,数据的同步由数据库集群去实现(比如文件复制)
		<programlisting>
		<![CDATA[
		<?xml version="1.0" encoding="UTF-8"?>
		<beans xmlns="http://www.springframework.org/schema/beans"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xmlns:p="http://www.springframework.org/schema/p"
			xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

			<bean id="dataSource"
				class="org.ironrhino.core.dataroute.RoutingDataSource">
				<!-- for GroupedDataSource-->
				<property name="groups">
					<list>
						<ref local="mainGroup"/>
						<ref local="miscGroup"/>
					</list>
				</property>
				<!-- for general DataSource-->
				<!--
						<property name="routingMap">
							<map>
								<entry key="mainGroup" value-ref="mainGroup"/>
								<entry key="miscGroup" value-ref="miscGroup"/>
							</map>
						</property>
					-->
			</bean>

			<bean id="mainGroup"
				class="org.ironrhino.core.dataroute.GroupedDataSource">
				<property name="masterName" value="mainGroupMaster"/>
				<property name="readSlaveNames">
					<map>
						<entry  key="mainGroupRead1" value="1"/>
						<entry  key="mainGroupRead2" value="2"/>
						<entry  key="mainGroupRead3" value="3"/>
					</map>
				</property>
				<property name="writeSlaveNames">
					<map>
						<entry  key="mainGroupWrite1" value="1"/>
						<entry  key="mainGroupWrite2" value="1"/>
					</map>
				</property>
			</bean>

			<bean id="miscGroup"
				class="org.ironrhino.core.dataroute.GroupedDataSource">
				<property name="masterName" value="miscGroupMaster"/>
				<property name="readSlaveNames">
					<map>
						<entry  key="miscGroupRead1" value="1"/>
						<entry  key="miscGroupRead2" value="2"/>
						<entry  key="miscGroupRead3" value="3"/>
					</map>
				</property>
				<property name="writeSlaveNames">
					<map>
						<entry  key="miscGroupWrite1" value="1"/>
						<entry  key="miscGroupWrite2" value="1"/>
					</map>
				</property>
			</bean>

			<bean id="mainGroupMaster"
				class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
				p:url="${jdbc.url}" p:username="${jdbc.username}"
				p:password="${jdbc.password}"
				p:driverClassName="${jdbc.driverClassName}"
				p:poolPreparedStatements="true" 
				p:removeAbandoned="true"
				p:initialSize="${dataSource.initialSize}" 
				p:maxActive="${dataSource.maxActive}"
				p:maxIdle="${dataSource.maxIdle}" 
				p:minIdle="${dataSource.minIdle}"
				p:maxWait="${dataSource.maxWait}" />
			<bean id="mainGroupRead1"
				class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
				p:url="${jdbc.url}" p:username="${jdbc.username}"
				p:password="${jdbc.password}"
				p:driverClassName="${jdbc.driverClassName}"
				p:poolPreparedStatements="true" 
				p:removeAbandoned="true"
				p:initialSize="${dataSource.initialSize}" 
				p:maxActive="${dataSource.maxActive}"
				p:maxIdle="${dataSource.maxIdle}" 
				p:minIdle="${dataSource.minIdle}"
				p:maxWait="${dataSource.maxWait}" />
			<bean id="mainGroupRead2"
				class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
				p:url="${jdbc.url}" p:username="${jdbc.username}"
				p:password="${jdbc.password}"
				p:driverClassName="${jdbc.driverClassName}"
				p:poolPreparedStatements="true" 
				p:removeAbandoned="true"
				p:initialSize="${dataSource.initialSize}" 
				p:maxActive="${dataSource.maxActive}"
				p:maxIdle="${dataSource.maxIdle}" 
				p:minIdle="${dataSource.minIdle}"
				p:maxWait="${dataSource.maxWait}" />
			<bean id="mainGroupRead3"
				class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
				p:url="${jdbc.url}" p:username="${jdbc.username}"
				p:password="${jdbc.password}"
				p:driverClassName="${jdbc.driverClassName}"
				p:poolPreparedStatements="true" 
				p:removeAbandoned="true"
				p:initialSize="${dataSource.initialSize}" 
				p:maxActive="${dataSource.maxActive}"
				p:maxIdle="${dataSource.maxIdle}" 
				p:minIdle="${dataSource.minIdle}"
				p:maxWait="${dataSource.maxWait}" />
			<bean id="mainGroupWrite1"
				class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
				p:url="${jdbc.url}" p:username="${jdbc.username}"
				p:password="${jdbc.password}"
				p:driverClassName="${jdbc.driverClassName}"
				p:poolPreparedStatements="true" 
				p:removeAbandoned="true"
				p:initialSize="${dataSource.initialSize}" 
				p:maxActive="${dataSource.maxActive}"
				p:maxIdle="${dataSource.maxIdle}" 
				p:minIdle="${dataSource.minIdle}"
				p:maxWait="${dataSource.maxWait}" />
			<bean id="mainGroupWrite2"
				class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
				p:url="${jdbc.url}" p:username="${jdbc.username}"
				p:password="${jdbc.password}"
				p:driverClassName="${jdbc.driverClassName}"
				p:poolPreparedStatements="true" 
				p:removeAbandoned="true"
				p:initialSize="${dataSource.initialSize}" 
				p:maxActive="${dataSource.maxActive}"
				p:maxIdle="${dataSource.maxIdle}" 
				p:minIdle="${dataSource.minIdle}"
				p:maxWait="${dataSource.maxWait}" />
			<bean id="miscGroupMaster"
				class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
				p:url="${jdbc.url}" p:username="${jdbc.username}"
				p:password="${jdbc.password}"
				p:driverClassName="${jdbc.driverClassName}"
				p:poolPreparedStatements="true" 
				p:removeAbandoned="true"
				p:initialSize="${dataSource.initialSize}" 
				p:maxActive="${dataSource.maxActive}"
				p:maxIdle="${dataSource.maxIdle}" 
				p:minIdle="${dataSource.minIdle}"
				p:maxWait="${dataSource.maxWait}" />
			<bean id="miscGroupRead1"
				class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
				p:url="${jdbc.url}" p:username="${jdbc.username}"
				p:password="${jdbc.password}"
				p:driverClassName="${jdbc.driverClassName}"
				p:poolPreparedStatements="true" 
				p:removeAbandoned="true"
				p:initialSize="${dataSource.initialSize}" 
				p:maxActive="${dataSource.maxActive}"
				p:maxIdle="${dataSource.maxIdle}" 
				p:minIdle="${dataSource.minIdle}"
				p:maxWait="${dataSource.maxWait}" />
			<bean id="miscGroupRead2"
				class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
				p:url="${jdbc.url}" p:username="${jdbc.username}"
				p:password="${jdbc.password}"
				p:driverClassName="${jdbc.driverClassName}"
				p:poolPreparedStatements="true" 
				p:removeAbandoned="true"
				p:initialSize="${dataSource.initialSize}" 
				p:maxActive="${dataSource.maxActive}"
				p:maxIdle="${dataSource.maxIdle}" 
				p:minIdle="${dataSource.minIdle}"
				p:maxWait="${dataSource.maxWait}" />
			<bean id="miscGroupRead3"
				class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
				p:url="${jdbc.url}" p:username="${jdbc.username}"
				p:password="${jdbc.password}"
				p:driverClassName="${jdbc.driverClassName}"
				p:poolPreparedStatements="true" 
				p:removeAbandoned="true"
				p:initialSize="${dataSource.initialSize}" 
				p:maxActive="${dataSource.maxActive}"
				p:maxIdle="${dataSource.maxIdle}" 
				p:minIdle="${dataSource.minIdle}"
				p:maxWait="${dataSource.maxWait}" />
			<bean id="miscGroupWrite1"
				class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
				p:url="${jdbc.url}" p:username="${jdbc.username}"
				p:password="${jdbc.password}"
				p:driverClassName="${jdbc.driverClassName}"
				p:poolPreparedStatements="true" 
				p:removeAbandoned="true"
				p:initialSize="${dataSource.initialSize}" 
				p:maxActive="${dataSource.maxActive}"
				p:maxIdle="${dataSource.maxIdle}" 
				p:minIdle="${dataSource.minIdle}"
				p:maxWait="${dataSource.maxWait}" />
			<bean id="miscGroupWrite2"
				class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
				p:url="${jdbc.url}" p:username="${jdbc.username}"
				p:password="${jdbc.password}"
				p:driverClassName="${jdbc.driverClassName}"
				p:poolPreparedStatements="true" 
				p:removeAbandoned="true"
				p:initialSize="${dataSource.initialSize}" 
				p:maxActive="${dataSource.maxActive}"
				p:maxIdle="${dataSource.maxIdle}" 
				p:minIdle="${dataSource.minIdle}"
				p:maxWait="${dataSource.maxWait}" />
			</beans>
		]]>			
		</programlisting>
		    @DataRoute可以打在model类上面,下面的实例表明Record的操作都走miscGroup组
		<programlisting>
		<![CDATA[
		package org.ironrhino.common.model;

		import java.util.Date;

		import org.ironrhino.core.metadata.AutoConfig;
		import org.ironrhino.core.metadata.DataRoute;
		import org.ironrhino.core.metadata.UiConfig;
		import org.ironrhino.core.model.BaseEntity;

		@DataRoute("miscGroup")
		@AutoConfig(readonly = true,order = "recordDate desc")
		public class Record extends BaseEntity {

			private static final long serialVersionUID = -8287907984213799302L;

			@UiConfig(width = "200px", displayOrder = 1)
			private String entityClass;

			@UiConfig(width = "200px", displayOrder = 2)
			private String entityId;

			@UiConfig(width = "100px", displayOrder = 3)
			private String action;

			@UiConfig(width = "200px", displayOrder = 4)
			private String operatorId;

			@UiConfig(width = "140px", displayOrder = 5)
			private Date recordDate;

			@UiConfig(hide = true)
			private String operatorClass;

			@UiConfig(hide = true)
			private String entityToString;

			public String getAction() {
				return action;
			}

			public void setAction(String action) {
				this.action = action;
			}

			public String getEntityClass() {
				return entityClass;
			}

			public void setEntityClass(String entityClass) {
				this.entityClass = entityClass;
			}

			public String getEntityId() {
				return entityId;
			}

			public void setEntityId(String entityId) {
				this.entityId = entityId;
			}

			public String getEntityToString() {
				return entityToString;
			}

			public void setEntityToString(String entityToString) {
				this.entityToString = entityToString;
			}

			public Date getRecordDate() {
				return recordDate;
			}

			public void setRecordDate(Date recordDate) {
				this.recordDate = recordDate;
			}

			public String getOperatorId() {
				return operatorId;
			}

			public void setOperatorId(String operatorId) {
				this.operatorId = operatorId;
			}

			public String getOperatorClass() {
				return operatorClass;
			}

			public void setOperatorClass(String operatorClass) {
				this.operatorClass = operatorClass;
			}

		}
		]]>
		</programlisting>
		@DataRoute也可以打在service类的方法上面,下面的实例表明当username为admin的时候走mainGroup,否则走miscGroup
		<programlisting>
		<![CDATA[
			package org.ironrhino.security.service;

			import javax.inject.Named;
			import javax.inject.Singleton;

			import org.ironrhino.core.metadata.CheckCache;
			import org.ironrhino.core.metadata.FlushCache;
			import org.ironrhino.core.service.BaseManagerImpl;
			import org.ironrhino.security.model.User;
			import org.springframework.security.core.userdetails.UsernameNotFoundException;
			import org.springframework.transaction.annotation.Transactional;

			@Singleton
			@Named("userManager")
			public class UserManagerImpl extends BaseManagerImpl<User> implements
							UserManager {

			@Transactional(readOnly = true)
			@DataRoute(value="${args[0]=='admin'?'mainGroup':'miscGroup'}")
			public User loadUserByUsername(String username) {
				User user = findByNaturalId(true, "username", username);
				if (user == null)
					throw new UsernameNotFoundException("No such Username");
				return user;
			}
		}
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
		@DataRoute("${target.route(args[0])}")
		public User loadUserByUsername(String username) {
			......
		}

		public String route(String username) {
			return username != null && username.length() < 6 ? "mainGroup" : "miscGroup";
		}
		]]>
		</programlisting>

		这样可以在方法级别把一张表放到不同的库

		不同的表放不同的库,在Entity类上面加写死的,比如@DataRoute("miscGroup")可以参考Record.java
		上述标注代码中target是被代理的对象
		比如是 ProductManagerImpl的实例:  ${target.route(args[0].user.username)}
		这种标注写法在表达式中，然后在ProductManagerImpl里的方法
		<programlisting>
		<![CDATA[
		public String route(String username){
		 ...
		}
		]]>
		</programlisting>
		省略的地方就是路由规则，比如根据username取模来定义
	</para>

</chapter>


