<chapter id="core-search">
  <title>全文检索</title>
    <para>
<programlisting>
		<![CDATA[
package com.mycompany.model;

import java.util.Date;

import org.compass.annotations.Searchable;
import org.compass.annotations.SearchableProperty;
import org.ironrhino.core.metadata.AutoConfig;
import org.ironrhino.core.metadata.NaturalId;
import org.ironrhino.core.model.BaseEntity;

@AutoConfig(searchable = true)
@Searchable(alias = "customer")
public class Customer extends BaseEntity {

						@NaturalId
						@SearchableProperty(boost=5)
						private String name;
						
						@SearchableProperty
						private String address;
						
						@SearchableProperty(converter = "date", format = "yyyy-MM-dd")
						private Date date = new Date();

						public String getName() {
							return name;
						}

						public void setName(String name) {
							this.name = name;
						}

						public String getAddress() {
							return address;
						}

						public void setAddress(String address) {
							this.address = address;
						}

						public Date getDate() {
							return date;
						}

						public void setDate(Date date) {
							this.date = date;
						}

}		
		]]>
</programlisting>
@Searchable和@SearchableProperty的用法请参考compass的文档,@AutoConfig(searchable = true) 会在customer列表页底部出现一个搜索框,试一试
    </para>

    <para>
如果想在你自己的Action里面调用搜索服务,请参考如下代码    
<programlisting>
		<![CDATA[
		
package com.mycompany.action;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.inject.Inject;

import org.apache.commons.lang.StringUtils;
import org.compass.core.CompassHit;
import org.compass.core.support.search.CompassSearchResults;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.ironrhino.core.model.ResultPage;
import org.ironrhino.core.search.CompassCriteria;
import org.ironrhino.core.search.CompassSearchService;
import org.ironrhino.core.struts.BaseAction;

import com.mycompany.model.Customer;
import com.mycompany.service.CustomerManager;

public class CustomerAction extends BaseAction {

	private static final long serialVersionUID = 4331302727890834065L;


	private ResultPage<Customer> resultPage;


	@Inject
	private transient CustomerManager customerManager;


	@Inject
	private transient CompassSearchService compassSearchService;

	public ResultPage<Customer> getResultPage() {
		return resultPage;
	}

	public void setResultPage(ResultPage<Customer> resultPage) {
		this.resultPage = resultPage;
	}

	@Override
	public String execute() {
		if (StringUtils.isBlank(keyword)) {
			DetachedCriteria dc = customerManager.detachedCriteria();
			if (resultPage == null)
				resultPage = new ResultPage<Customer>();
			resultPage.setDetachedCriteria(dc);
			resultPage.addOrder(org.hibernate.criterion.Order.asc("name"));
			resultPage = customerManager.findByResultPage(resultPage);
		} else {
			String query = keyword.trim();
			CompassCriteria cc = new CompassCriteria();
			cc.setQuery(query);
			cc.setAliases(new String[] { "customer" });
			if (resultPage == null)
				resultPage = new ResultPage<Customer>();
			cc.setPageNo(resultPage.getPageNo());
			cc.setPageSize(resultPage.getPageSize());
			CompassSearchResults searchResults = compassSearchService
					.search(cc);
			int totalHits = searchResults.getTotalHits();
			CompassHit[] hits = searchResults.getHits();
			if (hits != null) {
				List<Customer> list = new ArrayList<Customer>(hits.length);
				for (CompassHit ch : searchResults.getHits()) 
					list.add((Customer) ch.getData());
				resultPage.setResult(list);
			} else {
				resultPage.setResult(Collections.EMPTY_LIST);
			}
			resultPage.setTotalRecord(totalHits);
		}
		return LIST;
	}


}

		
		]]>
</programlisting>
    </para>

</chapter>


